# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import atomicswap_pb2 as atomicswap__pb2


class SwapLibStub(object):
  """Swap Server
  Implemented in golang
  Other language bindings can access as client, see README
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.PingWalletRPC = channel.unary_unary(
        '/protobind.SwapLib/PingWalletRPC',
        request_serializer=atomicswap__pb2.PingWalletRPCRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.PingWalletRPCResponse.FromString,
        )
    self.NewAddress = channel.unary_unary(
        '/protobind.SwapLib/NewAddress',
        request_serializer=atomicswap__pb2.NewAddressRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.NewAddressResponse.FromString,
        )
    self.Initiate = channel.unary_unary(
        '/protobind.SwapLib/Initiate',
        request_serializer=atomicswap__pb2.InitiateRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.InitiateResponse.FromString,
        )
    self.Participate = channel.unary_unary(
        '/protobind.SwapLib/Participate',
        request_serializer=atomicswap__pb2.ParticipateRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.ParticipateResponse.FromString,
        )
    self.Redeem = channel.unary_unary(
        '/protobind.SwapLib/Redeem',
        request_serializer=atomicswap__pb2.RedeemRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.RedeemResponse.FromString,
        )
    self.Refund = channel.unary_unary(
        '/protobind.SwapLib/Refund',
        request_serializer=atomicswap__pb2.RefundRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.RefundResponse.FromString,
        )
    self.Publish = channel.unary_unary(
        '/protobind.SwapLib/Publish',
        request_serializer=atomicswap__pb2.PublishRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.PublishResponse.FromString,
        )
    self.ExtractSecret = channel.unary_unary(
        '/protobind.SwapLib/ExtractSecret',
        request_serializer=atomicswap__pb2.ExtractSecretRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.ExtractSecretResponse.FromString,
        )
    self.Audit = channel.unary_unary(
        '/protobind.SwapLib/Audit',
        request_serializer=atomicswap__pb2.AuditRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.AuditResponse.FromString,
        )
    self.GetTx = channel.unary_unary(
        '/protobind.SwapLib/GetTx',
        request_serializer=atomicswap__pb2.GetTxRequest.SerializeToString,
        response_deserializer=atomicswap__pb2.GetTxResponse.FromString,
        )


class SwapLibServicer(object):
  """Swap Server
  Implemented in golang
  Other language bindings can access as client, see README
  """

  def PingWalletRPC(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NewAddress(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Initiate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Participate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Redeem(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Refund(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ExtractSecret(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Audit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTx(self, request, context):
    """...
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SwapLibServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'PingWalletRPC': grpc.unary_unary_rpc_method_handler(
          servicer.PingWalletRPC,
          request_deserializer=atomicswap__pb2.PingWalletRPCRequest.FromString,
          response_serializer=atomicswap__pb2.PingWalletRPCResponse.SerializeToString,
      ),
      'NewAddress': grpc.unary_unary_rpc_method_handler(
          servicer.NewAddress,
          request_deserializer=atomicswap__pb2.NewAddressRequest.FromString,
          response_serializer=atomicswap__pb2.NewAddressResponse.SerializeToString,
      ),
      'Initiate': grpc.unary_unary_rpc_method_handler(
          servicer.Initiate,
          request_deserializer=atomicswap__pb2.InitiateRequest.FromString,
          response_serializer=atomicswap__pb2.InitiateResponse.SerializeToString,
      ),
      'Participate': grpc.unary_unary_rpc_method_handler(
          servicer.Participate,
          request_deserializer=atomicswap__pb2.ParticipateRequest.FromString,
          response_serializer=atomicswap__pb2.ParticipateResponse.SerializeToString,
      ),
      'Redeem': grpc.unary_unary_rpc_method_handler(
          servicer.Redeem,
          request_deserializer=atomicswap__pb2.RedeemRequest.FromString,
          response_serializer=atomicswap__pb2.RedeemResponse.SerializeToString,
      ),
      'Refund': grpc.unary_unary_rpc_method_handler(
          servicer.Refund,
          request_deserializer=atomicswap__pb2.RefundRequest.FromString,
          response_serializer=atomicswap__pb2.RefundResponse.SerializeToString,
      ),
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=atomicswap__pb2.PublishRequest.FromString,
          response_serializer=atomicswap__pb2.PublishResponse.SerializeToString,
      ),
      'ExtractSecret': grpc.unary_unary_rpc_method_handler(
          servicer.ExtractSecret,
          request_deserializer=atomicswap__pb2.ExtractSecretRequest.FromString,
          response_serializer=atomicswap__pb2.ExtractSecretResponse.SerializeToString,
      ),
      'Audit': grpc.unary_unary_rpc_method_handler(
          servicer.Audit,
          request_deserializer=atomicswap__pb2.AuditRequest.FromString,
          response_serializer=atomicswap__pb2.AuditResponse.SerializeToString,
      ),
      'GetTx': grpc.unary_unary_rpc_method_handler(
          servicer.GetTx,
          request_deserializer=atomicswap__pb2.GetTxRequest.FromString,
          response_serializer=atomicswap__pb2.GetTxResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'protobind.SwapLib', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
