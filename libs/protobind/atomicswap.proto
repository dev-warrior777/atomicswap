
// Copyright (c) 2018/2019 The DevCo developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

syntax = "proto3";
package protobind;

enum NetType {
	MAINNET = 0;
	TESTNET = 1;	
}

message NewAddressRequest {
	string coin = 1;
	NetType net = 2;

	string hostport = 5;	// default localhost
	string rpcuser = 6;
	string rpcpass = 7;

	reserved 8 to 15;
}

message NewAddressResponse {
	string coin = 1;
	NetType net = 2;

	string address = 5;

	int32 errorno = 14;
	string errstr = 15;

	reserved 6 to 13;
}

message InitiateRequest {
	string coin = 1;
	NetType net = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;

	string part_address = 8;
	uint64 amount = 9;		// "satoshis"

	reserved 10 to 15;
}

message InitiateResponse {
	string coin = 1;
	NetType net = 2;

	string secret = 5;
	string contract = 6;
	string contract_tx = 7;
	uint64 fee = 8;
	uint64 feerate = 9;

	int32 errorno = 14;
	string errstr = 15;

	reserved 10 to 13;
}

message ParticipateRequest {
	string coin = 1;
	NetType net = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;

	string secrethash = 8;	
	string part_address = 9;
	uint64 amount = 10;		// "satoshis"

	reserved 11 to 15;
}

message ParticipateResponse {
	string coin = 1;
	NetType net = 2;

	string contract = 5;
	string contract_tx = 6;
	uint64 fee = 7;
	uint64 feerate = 8;

	int32 errorno = 14;
	string errstr = 15;

	reserved 9 to 13;
}

message RedeemRequest {
	string coin = 1;
	NetType net = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;

	string secret = 8;	
	string contract = 9;
	uint64 contract_tx = 10;

	reserved 11 to 15;
}

message RedeemResponse {
	string coin = 1;
	NetType net = 2;

	string redeem_tx = 5;
	uint64 fee = 6;
	uint64 feerate = 7;

	int32 errorno = 14;
	string errstr = 15;

	reserved 8 to 13;
}

message RefundRequest {
	string coin = 1;
	NetType net = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;

	string contract = 8;
	uint64 contract_tx = 9;

	reserved 10 to 15;
}

message RefundResponse {
	string coin = 1;
	NetType net = 2;

	string refund_tx = 5;
	uint64 fee = 6;
	uint64 feerate = 7;

	int32 errorno = 14;
	string errstr = 15;

	reserved 8 to 13;
}

message PublishRequest {
	string coin = 1;
	NetType net = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;

	uint64 tx = 8;

	reserved 9 to 15;
}

message PublishResponse {
	string coin = 1;
	NetType net = 2;

	string txhash = 5;

	int32 errorno = 14;
	string errstr = 15;

	reserved 6 to 13;
}

message ExtractSecretRequest {
	string coin = 1;
	NetType net = 2;

	string cp_redemption_tx = 5;
	string secrethash = 6;

	reserved 7 to 15;
}

message ExtractSecretResponse {
	string coin = 1;
	NetType net = 2;

	string secret = 5;

	int32 errorno = 14;
	string errstr = 15;

	reserved 7 to 13;
}

message AuditRequest {
	string coin = 1;
	NetType net = 2;

	string contract = 5;
	uint64 contract_tx = 6;

	reserved 7 to 15;
}

message AuditResponse {
	string coin = 1;
	NetType net = 2;

	string secrethash = 5;
	string contract_address = 6;
	uint64 contract_value = 7;	// satoshis
	string recipient_address = 8;
	string refund_address = 9;
	uint64 refund_locktime = 10;

	int32 errorno = 14;
	string errstr = 15;

	reserved 11 to 13;
}

//TODO: Define service and implement golang side server so other bindings can access as client

