
// Copyright (c) 2018/2019 The DevCo developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

syntax = "proto3";
package protobind;

//
// Shared with dragon - keep coins in sync
//
enum COIN {
	BTC = 0;
	LTC = 1;
	XZC = 2;
	//...
}

enum ERRNO {
	OK = 0;
	LIBS = 1;
	UNSUPPORTED = 2;
}

message PingWalletRPCRequest {
	COIN coin = 1;
	bool testnet = 2;

	string hostport = 5;	// default localhost
	string rpcuser = 6;
	string rpcpass = 7;
	string certs = 8;
}

message PingWalletRPCResponse {
	ERRNO errorno = 14;
	string errstr = 15;
}

message NewAddressRequest {
	COIN coin = 1;
	bool testnet = 2;

	string hostport = 5;	// default localhost
	string rpcuser = 6;
	string rpcpass = 7;
	string certs = 8;
}

message NewAddressResponse {
	string address = 5;
	ERRNO errorno = 14;
	string errstr = 15;
}

message InitiateRequest {
	COIN coin = 1;
	bool testnet = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;
	string certs = 8;

	string part_address = 9;
	int64 amount = 10;		// "satoshis"
}

message InitiateResponse {
	string secret = 5;
	string secrethash = 6;
	string contract = 7;
	string contract_p2sh = 8;
	string contract_tx = 9;
	string contract_tx_hash = 10;
	int64 fee = 11;			// "satoshis"
	float feerate = 12;

	ERRNO errorno = 14;
	string errstr = 15;
}

message ParticipateRequest {
	COIN coin = 1;
	bool testnet = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;
	string certs = 8; // currently only needed for DCR

	string secrethash = 9;
	string part_address = 10;
	int64 amount = 11;		// "satoshis"
}

message ParticipateResponse {
	string contract = 5;
	string contract_p2sh = 6;
	string contract_tx = 7;
	string contract_tx_hash = 8;
	int64 fee = 9;			// "satoshis"
	float feerate = 10;

	ERRNO errorno = 14;
	string errstr = 15;
}

message RedeemRequest {
	COIN coin = 1;
	bool testnet = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;
	string certs = 8;

	string secret = 9;	
	string contract = 10;
	uint64 contract_tx = 11;
}

message RedeemResponse {
	string redeem_tx = 5;
	string redeem_tx_hash = 6;
	int64 fee = 7;			// "satoshis"
	float feerate = 8;

	ERRNO errorno = 14;
	string errstr = 15;
}

message RefundRequest {
	COIN coin = 1;
	bool testnet = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;
	string certs = 8;

	string contract = 9;
	uint64 contract_tx = 10;
}

message RefundResponse {
	string refund_tx = 5;
	string refund_tx_hash = 6;
	int64 fee = 7;			// "satoshis"
	float feerate = 8;

	ERRNO errorno = 14;
	string errstr = 15;
}

message PublishRequest {
	COIN coin = 1;
	bool testnet = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;
	string certs = 8;

	string tx = 9;
}

message PublishResponse {
	string tx_hash = 5;

	ERRNO errorno = 14;
	string errstr = 15;
}

message ExtractSecretRequest {
	COIN coin = 1;
	bool testnet = 2;

	string cp_redemption_tx = 5;
	string secrethash = 6;
}

message ExtractSecretResponse {
	string secret = 5;

	ERRNO errorno = 14;
	string errstr = 15;
}

message AuditRequest {
	COIN coin = 1;
	bool testnet = 2;

	string contract = 5;
	uint64 contract_tx = 6;
}

message AuditResponse {
	int64 contract_amount = 5;	// satoshis
	string contract_address = 6;
	string contract_secrethash = 7;
	string recipient_address = 8;
	string refund_address = 9;
	uint64 refund_locktime = 10;

	ERRNO errorno = 14;
	string errstr = 15;
}

message GetTxRequest {
	COIN coin = 1;
	bool testnet = 2;

	string hostport = 5;
	string rpcuser = 6;
	string rpcpass = 7;
	string certs = 8;

	string txid = 9;
}

message GetTxResponse {
	uint64 confirmations = 5;
	string blockhash = 6;
	int32 blockindex = 7;
	uint64 blocktime = 8;
	uint64 time = 9;
	uint64 time_received = 10;
	string hex = 11;

	ERRNO errorno = 14;
	string errstr = 15;
}

//TODO: Implement golang side server so other language bindings can access as client
service SwapLib {
	rpc PingWalletRPC(PingWalletRPCRequest) returns(PingWalletRPCResponse);
	rpc NewAddress(NewAddressRequest) returns(NewAddressResponse);
	rpc Initiate(InitiateRequest) returns (InitiateResponse);
	rpc Participate(ParticipateRequest) returns (ParticipateResponse);
	rpc Redeem(RedeemRequest) returns(RedeemResponse);
	rpc Refund(RefundRequest) returns(RefundResponse);
	rpc Publish(PublishRequest) returns(PublishResponse);
	rpc ExtractSecret(ExtractSecretRequest) returns(ExtractSecretResponse);
	rpc Audit(AuditRequest) returns(AuditResponse);
	rpc GetTx(GetTxRequest) returns(GetTxResponse);
	//...
}
